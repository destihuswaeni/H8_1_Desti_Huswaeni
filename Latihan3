#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Jun 11 08:45:51 2022

@author: destihuswaeni
"""

#Contoh1 : Penggunaan Function

def my_function (p,l):
    "Function untuk menghitung luas"
    print(p*l)
my_function(2, 4)

#Contoh2 : Calling Function (menggunakan function print me)
def printme(str):
    "This prints a passed string into this function"
    print(str)
    return;
    
#Now you can call print me function
printme("I'm first call to user defined function!")
printme("Again second call to the same function")

#Contoh3 : Pass by reference vs value (changeme)
# Function definition is here (dengan fungsi penambah atau append)
def changeme( mylist ):
   "This changes a passed list into this function"
   mylist.append(1); #(fungsi menambahkan)
   mylist.append(2);
   print("Values inside the function: ", mylist)
   return

# Now you can call changeme function
mylist = [10,20,30];
mylist = [20,30,40];
changeme( mylist );
print("Values outside the function: ", mylist)

# Function definition is here (tanpa fungsi penambah/append)
def changeme( mylist ):
   "This changes a passed list into this function"
   mylist = [1,2,3,4]; # This would assig new reference in mylist
   print("Values inside the function: ", mylist)
   return

# Now you can call changeme function
mylist = [10,20,30];
changeme( mylist );
print("Values outside the function: ", mylist)

#Contoh4 : Required arguments
#Error
# Function definition is here
def printme( str ):
   "This prints a passed string into this function"
   print(str)
   return;

# Now you can call printme function
printme()

#Contoh5 : Keyword arguments
#Benar
# Function definition is here
def printme( str ):
   "This prints a passed string into this function"
   print(str)
   return;

# Now you can call printme function
printme("Hacktive8")

#Benar2
# Function definition is here
def printme( str ):
   "This prints a passed string into this function"
   print(str)
   return;

# Now you can call printme function
printme(str = 123)

#Benar3
# Function definition is here
def printme( str ):
   "This prints a passed string into this function"
   print(str)
   return;

# Now you can call printme function
printme(123)

#Benar4
# Function definition is here
def printme( str ):
   "This prints a passed string into this function"
   print(str)
   return;

# Now you can call printme function
printme(123)
printme('hactive8')

#Benar5
# Function definition is here
def printinfo( name, age ):
   "This prints a passed info into this function"
   print("Name: ", name)
   print("Age: ", age)
   return;

# Now you can call printinfo function
printinfo( age=4, name="a" )

#Latihan1 
def printinfo(name,nilai1,nilai2,nilai3,nilai4,nilaiakhir):
    "This prints a passed info into this function"
    nilaiakhir = (nilai1*0.1)+(nilai2*0.2)+(nilai3*0.3)+(nilai4*0.4)
    print("name: ", name)
    print("nilai 1: ", nilai1)
    print("nilai 2: ", nilai2)
    print("nilai 3: ", nilai3)
    print("nilai 4: ", nilai4)
    print("nilai akhir: ", nilaiakhir)
    return;

# Now you can call printinfo function
printinfo( name='a', nilai1=100, nilai2=80, nilai3=75, nilai4=88, nilaiakhir=0)
    
#Contoh6 : Default Argument
# Function definition is here
def printinfo( name, age = 26 ):
   "This prints a passed info into this function"
   print("Name: ", name)
   print("Age: ", age)
   return;

# Now you can call printinfo function
printinfo( age=50, name="hacktiv8" )
printinfo( name="hacktiv" )

#Latihan2
def printinfo(name, gender="male", age=26):
    "This prints a passed info into this function"
    print("Name: ", name)
    print("Age: ", age)
    print("Gender: ", gender)
    
# Now you can call printinfo function
printinfo( age=50, name="hacktiv8" )
printinfo( name="hacktiv" )

#Contoh7 : Variable-length arguments
# Function definition is here
def printinfo( arg1, *vartuple ):
   "This prints a variable passed arguments"
   print("Output is: ")
   print(arg1)
   for var in vartuple:
      print(var)
   return;

# Now you can call printinfo function
printinfo( 10 )
printinfo( 70, 60, 50, "a" )

###
# Function definition is here
def printinfo( arg1, *vartuple ):
   "This prints a variable passed arguments"
   print("Output is: ")
   print(arg1)
   for var in vartuple:
      print(vartuple)
   return;

# Now you can call printinfo function
printinfo( 10 )
printinfo( 70, 60, 50, "a", 1)


#Contoh7 : The Anonymous Functions
# Function definition is here
sum = lambda arg1, arg2: arg1 + arg2;

#def sum(arg1, arg2):
   #arg1 + arg2
    
# Now you can call sum as a function
print("Value of total : ", sum( 10, 20 ))
print("Value of total : ", sum( 20, 20 ))


#Contoh8 : The return Statement
# Function definition is here
def sum(arg1, arg2):
    # Add both the parameters and return them."
    total = arg1 + arg2
    total2 = total + arg1
    print("Inside the function : ", total)
    return total2

# Now you can call sum function
total = sum(10, 20)
print("Outside the function : ", total)